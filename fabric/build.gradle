plugins {
    id 'fabric-loom' version '1.7-SNAPSHOT'
}

version = project.project_version
group = project.group

configurations {
    shade
    compile.extendsFrom shade
}

dependencies {
    implementation project(path: ':common')
    shade project(path: ':common')

    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

processResources {
    var replaceProperties = [
            minecraft_version: project.minecraft_version,
            loader_version   : project.loader_version,
            mod_id           : mod_id,
            mod_name         : project.mod_name,
            mod_license      : project.mod_license,
            mod_version      : project.project_version,
            mod_authors      : project.mod_authors,
            mod_description  : project.mod_description,
            contact_sources  : project.contact_sources,
            contact_issues   : project.contact_issues,
            contact_homepage : project.contact_homepage
    ]

    inputs.properties replaceProperties

    filteringCharset "UTF-8"
    filesMatching(['fabric.mod.json']) {
        expand replaceProperties + [project: project]
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

jar {
    configurations.shade.each { dep ->
        duplicatesStrategy = DuplicatesStrategy.WARN
        from(project.zipTree(dep)) {
            exclude 'META-INF/MANIFEST.MF', 'module-info.class'
        }
    }
}

remapJar {
    archiveBaseName.set("SimpleWhitelist")
    archiveClassifier.set("")
    archiveAppendix.set("FabricQuilt")
    archiveVersion.set(String.format("%s_%s", version, project.minecraft_version))
}
